#!/bin/bash
# install_dependencies.sh - Installation des d√©pendances Pacha Toolbox

echo "üöÄ Installation des d√©pendances Pacha Toolbox"
echo "==============================================="

# Couleurs pour les messages
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier Python
log_info "V√©rification de Python..."
if command -v python3 &> /dev/null; then
    PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)
    log_success "Python $PYTHON_VERSION trouv√©"
else
    log_error "Python 3 non trouv√©. Installez Python 3.8+ avant de continuer."
    exit 1
fi

# V√©rifier pip
log_info "V√©rification de pip..."
if command -v pip3 &> /dev/null; then
    log_success "pip3 trouv√©"
elif command -v pip &> /dev/null; then
    log_success "pip trouv√©"
    alias pip3=pip
else
    log_error "pip non trouv√©. Installez pip avant de continuer."
    exit 1
fi

# Cr√©er un environnement virtuel (optionnel mais recommand√©)
log_info "Voulez-vous cr√©er un environnement virtuel ? (recommand√©) [y/N]"
read -r create_venv

if [[ $create_venv =~ ^[Yy]$ ]]; then
    log_info "Cr√©ation de l'environnement virtuel..."
    
    if python3 -m venv pacha-venv; then
        log_success "Environnement virtuel cr√©√©"
        log_info "Activation de l'environnement virtuel..."
        source pacha-venv/bin/activate
        log_success "Environnement virtuel activ√©"
        
        # Mettre √† jour pip dans le venv
        pip install --upgrade pip
    else
        log_error "√âchec de cr√©ation de l'environnement virtuel"
        log_warning "Continuons sans environnement virtuel..."
    fi
fi

# Installation des d√©pendances Python
log_info "Installation des d√©pendances Python..."

# D√©pendances essentielles
DEPENDENCIES=(
    "flask>=2.0.0"
    "flask-cors>=3.0.0"
    "requests>=2.25.0"
)

# D√©pendances optionnelles (pour de meilleures fonctionnalit√©s)
OPTIONAL_DEPENDENCIES=(
    "psutil>=5.8.0"
    "python-nmap>=0.6.0"
    "colorama>=0.4.0"
)

# Installation des d√©pendances essentielles
log_info "Installation des d√©pendances essentielles..."
for dep in "${DEPENDENCIES[@]}"; do
    log_info "Installation de $dep..."
    if pip3 install "$dep"; then
        log_success "$dep install√©"
    else
        log_error "√âchec installation de $dep"
        exit 1
    fi
done

# Installation des d√©pendances optionnelles
log_info "Installation des d√©pendances optionnelles..."
for dep in "${OPTIONAL_DEPENDENCIES[@]}"; do
    log_info "Installation de $dep..."
    if pip3 install "$dep"; then
        log_success "$dep install√©"
    else
        log_warning "√âchec installation de $dep (optionnel)"
    fi
done

# Cr√©er la structure de r√©pertoires
log_info "Cr√©ation de la structure de r√©pertoires..."
mkdir -p data/{reports,reports/pdf,logs,temp}
mkdir -p data/captures

log_success "Structure de r√©pertoires cr√©√©e"

# V√©rifier les outils de s√©curit√© (optionnel)
log_info "V√©rification des outils de s√©curit√©..."

check_tool() {
    local tool=$1
    if command -v "$tool" &> /dev/null; then
        log_success "$tool trouv√©"
        return 0
    else
        log_warning "$tool non trouv√© (optionnel pour la simulation)"
        return 1
    fi
}

check_tool "nmap"
check_tool "nikto"
check_tool "hydra"

# Test de l'installation
log_info "Test de l'installation..."

cat > test_install.py << 'EOF'
#!/usr/bin/env python3
"""Test de l'installation des d√©pendances"""

def test_imports():
    try:
        import flask
        print("‚úÖ Flask OK")
    except ImportError as e:
        print(f"‚ùå Flask: {e}")
        return False
    
    try:
        import flask_cors
        print("‚úÖ Flask-CORS OK")
    except ImportError as e:
        print(f"‚ùå Flask-CORS: {e}")
        return False
    
    try:
        import requests
        print("‚úÖ Requests OK")
    except ImportError as e:
        print(f"‚ùå Requests: {e}")
        return False
    
    # Tests optionnels
    try:
        import psutil
        print("‚úÖ psutil OK (optionnel)")
    except ImportError:
        print("‚ö†Ô∏è psutil non disponible (optionnel)")
    
    try:
        import nmap
        print("‚úÖ python-nmap OK (optionnel)")
    except ImportError:
        print("‚ö†Ô∏è python-nmap non disponible (optionnel)")
    
    return True

if __name__ == "__main__":
    print("üß™ Test des imports Python...")
    if test_imports():
        print("‚úÖ Tous les imports essentiels fonctionnent!")
        exit(0)
    else:
        print("‚ùå Certains imports essentiels ont √©chou√©")
        exit(1)
EOF

if python3 test_install.py; then
    log_success "Test d'installation r√©ussi"
    rm test_install.py
else
    log_error "Test d'installation √©chou√©"
    rm test_install.py
    exit 1
fi

# Instructions finales
echo ""
echo "üéâ Installation termin√©e avec succ√®s!"
echo "==============================================="
echo ""
log_success "D√©pendances Python install√©es"
log_success "Structure de r√©pertoires cr√©√©e"
log_success "Tests pass√©s"
echo ""
echo "üìã Pour d√©marrer Pacha Toolbox:"
echo ""

if [[ $create_venv =~ ^[Yy]$ ]]; then
    echo "1. Activez l'environnement virtuel:"
    echo "   source pacha-venv/bin/activate"
    echo ""
fi

echo "2. D√©marrez le backend:"
echo "   cd backend"
echo "   python3 main.py"
echo ""
echo "3. Testez l'API:"
echo "   curl http://localhost:5000/api/health"
echo ""

if [[ $create_venv =~ ^[Yy]$ ]]; then
    echo "üí° Pour d√©sactiver l'environnement virtuel plus tard:"
    echo "   deactivate"
    echo ""
fi

echo "üìö Endpoints disponibles:"
echo "   http://localhost:5000/api/health"
echo "   http://localhost:5000/api/threading/info"
echo "   http://localhost:5000/api/threading/dashboard"
echo ""

log_success "Installation compl√®te! Vous pouvez maintenant utiliser Pacha Toolbox."

# Afficher des infos suppl√©mentaires si demand√©
log_info "Voulez-vous voir les informations d√©taill√©es ? [y/N]"
read -r show_details

if [[ $show_details =~ ^[Yy]$ ]]; then
    echo ""
    echo "üîß Informations d√©taill√©es:"
    echo "=================================="
    echo "Python: $(python3 --version)"
    echo "pip: $(pip3 --version)"
    echo "Flask: $(python3 -c 'import flask; print(flask.__version__)' 2>/dev/null || echo 'Non install√©')"
    echo "R√©pertoire actuel: $(pwd)"
    echo "R√©pertoires cr√©√©s:"
    find data -type d 2>/dev/null | sort || echo "Aucun r√©pertoire data trouv√©"
    echo ""
fi
